//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Scripts/Player Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Player_Onfoot"",
            ""id"": ""757118c2-8b1c-4e97-a5ac-16eda3f78e86"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9fc4f8fc-fac8-412e-bbf2-a349e8ebfb01"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""0b4b05df-1460-4aff-b243-cfcf6e703ec9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LookAround"",
                    ""type"": ""Value"",
                    ""id"": ""367494c4-9b20-40eb-845a-592daaaeaffd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e75b6b0-f198-4067-b758-9d8b9dbcd6ac"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""defe21c8-0d6f-4f32-b449-806bd76a3ad4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cd9ffb2e-5b83-4d4d-be52-710cfcd099f7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""980aeddd-b279-471c-8897-cade5857b152"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e76e05a-90cd-46d9-8061-c7fb43a1572b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ec198bd5-9cb4-4908-bccd-be743f584fcb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""937846fa-9021-48e6-86ec-8cfe128d8f71"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""263068a0-c3b5-4321-ac6d-6405423f6e44"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAround"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Onfoot
        m_Player_Onfoot = asset.FindActionMap("Player_Onfoot", throwIfNotFound: true);
        m_Player_Onfoot_Movement = m_Player_Onfoot.FindAction("Movement", throwIfNotFound: true);
        m_Player_Onfoot_Jump = m_Player_Onfoot.FindAction("Jump", throwIfNotFound: true);
        m_Player_Onfoot_LookAround = m_Player_Onfoot.FindAction("LookAround", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        Debug.Assert(!m_Player_Onfoot.enabled, "This will cause a leak and performance issues, PlayerInput.Player_Onfoot.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Onfoot
    private readonly InputActionMap m_Player_Onfoot;
    private List<IPlayer_OnfootActions> m_Player_OnfootActionsCallbackInterfaces = new List<IPlayer_OnfootActions>();
    private readonly InputAction m_Player_Onfoot_Movement;
    private readonly InputAction m_Player_Onfoot_Jump;
    private readonly InputAction m_Player_Onfoot_LookAround;
    public struct Player_OnfootActions
    {
        private @PlayerInput m_Wrapper;
        public Player_OnfootActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Onfoot_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Onfoot_Jump;
        public InputAction @LookAround => m_Wrapper.m_Player_Onfoot_LookAround;
        public InputActionMap Get() { return m_Wrapper.m_Player_Onfoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_OnfootActions set) { return set.Get(); }
        public void AddCallbacks(IPlayer_OnfootActions instance)
        {
            if (instance == null || m_Wrapper.m_Player_OnfootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player_OnfootActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @LookAround.started += instance.OnLookAround;
            @LookAround.performed += instance.OnLookAround;
            @LookAround.canceled += instance.OnLookAround;
        }

        private void UnregisterCallbacks(IPlayer_OnfootActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @LookAround.started -= instance.OnLookAround;
            @LookAround.performed -= instance.OnLookAround;
            @LookAround.canceled -= instance.OnLookAround;
        }

        public void RemoveCallbacks(IPlayer_OnfootActions instance)
        {
            if (m_Wrapper.m_Player_OnfootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer_OnfootActions instance)
        {
            foreach (var item in m_Wrapper.m_Player_OnfootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player_OnfootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player_OnfootActions @Player_Onfoot => new Player_OnfootActions(this);
    public interface IPlayer_OnfootActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLookAround(InputAction.CallbackContext context);
    }
}
